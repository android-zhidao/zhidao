package com.example.dxnima.zhidao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dxnima.zhidao.bean.table.Msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG".
*/
public class MsgDao extends AbstractDao<Msg, Void> {

    public static final String TABLENAME = "MSG";

    /**
     * Properties of entity Msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Msgid = new Property(0, Integer.class, "msgid", false, "MSGID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Endtime = new Property(2, java.util.Date.class, "endtime", false, "ENDTIME");
        public final static Property Creattime = new Property(3, java.util.Date.class, "creattime", false, "CREATTIME");
        public final static Property Code = new Property(4, String.class, "code", false, "CODE");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Filepath = new Property(6, String.class, "filepath", false, "FILEPATH");
        public final static Property Userid = new Property(7, Integer.class, "userid", false, "USERID");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
    };


    public MsgDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG\" (" + //
                "\"MSGID\" INTEGER," + // 0: msgid
                "\"TITLE\" TEXT," + // 1: title
                "\"ENDTIME\" INTEGER," + // 2: endtime
                "\"CREATTIME\" INTEGER," + // 3: creattime
                "\"CODE\" TEXT," + // 4: code
                "\"LOCATION\" TEXT," + // 5: location
                "\"FILEPATH\" TEXT," + // 6: filepath
                "\"USERID\" INTEGER," + // 7: userid
                "\"CONTENT\" TEXT);"); // 8: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Integer msgid = entity.getMsgid();
        if (msgid != null) {
            stmt.bindLong(1, msgid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindLong(3, endtime.getTime());
        }
 
        java.util.Date creattime = entity.getCreattime();
        if (creattime != null) {
            stmt.bindLong(4, creattime.getTime());
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(7, filepath);
        }
 
        Integer userid = entity.getUserid();
        if (userid != null) {
            stmt.bindLong(8, userid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Integer msgid = entity.getMsgid();
        if (msgid != null) {
            stmt.bindLong(1, msgid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        java.util.Date endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindLong(3, endtime.getTime());
        }
 
        java.util.Date creattime = entity.getCreattime();
        if (creattime != null) {
            stmt.bindLong(4, creattime.getTime());
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String filepath = entity.getFilepath();
        if (filepath != null) {
            stmt.bindString(7, filepath);
        }
 
        Integer userid = entity.getUserid();
        if (userid != null) {
            stmt.bindLong(8, userid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Msg readEntity(Cursor cursor, int offset) {
        Msg entity = new Msg( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // msgid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // endtime
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // creattime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // filepath
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // userid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Msg entity, int offset) {
        entity.setMsgid(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEndtime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setCreattime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFilepath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserid(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Msg entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Msg entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
