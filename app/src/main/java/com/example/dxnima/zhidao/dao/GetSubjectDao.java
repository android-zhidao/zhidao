package com.example.dxnima.zhidao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dxnima.zhidao.bean.table.GetSubject;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GET_SUBJECT".
*/
public class GetSubjectDao extends AbstractDao<GetSubject, Void> {

    public static final String TABLENAME = "GET_SUBJECT";

    /**
     * Properties of entity GetSubject.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property Userid = new Property(1, Integer.class, "userid", false, "USERID");
        public final static Property Subid = new Property(2, Integer.class, "subid", false, "SUBID");
        public final static Property Categoryname = new Property(3, String.class, "categoryname", false, "CATEGORYNAME");
    };


    public GetSubjectDao(DaoConfig config) {
        super(config);
    }
    
    public GetSubjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GET_SUBJECT\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"USERID\" INTEGER," + // 1: userid
                "\"SUBID\" INTEGER," + // 2: subid
                "\"CATEGORYNAME\" TEXT);"); // 3: categoryname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GET_SUBJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GetSubject entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userid = entity.getUserid();
        if (userid != null) {
            stmt.bindLong(2, userid);
        }
 
        Integer subid = entity.getSubid();
        if (subid != null) {
            stmt.bindLong(3, subid);
        }
 
        String categoryname = entity.getCategoryname();
        if (categoryname != null) {
            stmt.bindString(4, categoryname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GetSubject entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userid = entity.getUserid();
        if (userid != null) {
            stmt.bindLong(2, userid);
        }
 
        Integer subid = entity.getSubid();
        if (subid != null) {
            stmt.bindLong(3, subid);
        }
 
        String categoryname = entity.getCategoryname();
        if (categoryname != null) {
            stmt.bindString(4, categoryname);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GetSubject readEntity(Cursor cursor, int offset) {
        GetSubject entity = new GetSubject( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // subid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // categoryname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GetSubject entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSubid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCategoryname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GetSubject entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GetSubject entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
